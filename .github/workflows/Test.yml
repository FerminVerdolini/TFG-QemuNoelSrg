name: Run firmware tests in QEMU

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Init test submodule
        run: git submodule update --init firmware-tests

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential libglib2.0-dev libpixman-1-dev wget tar xz-utils unzip

      - name: Cache Gaisler NCC Toolchain
        id: cache-ncc
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/gaisler
          key: ${{ runner.os }}-gaisler-ncc-1.0.4

      - name: Ensure $HOME/gaisler exists
        run: mkdir -p $HOME/gaisler

      - name: Download and extract Gaisler NCC if not cached
        if: steps.cache-ncc.outputs.cache-hit != 'true'
        run: |
          wget http://download.gaisler.com/products/ncc/bin/ncc-1.0.4-gcc-linux64.tar.xz -O ncc.tar.xz
          tar -xf ncc.tar.xz -C $HOME/gaisler

      - name: Add Gaisler NCC to PATH
        run: echo "$HOME/gaisler/ncc-1.0.4-gcc/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          ls -la $HOME/gaisler/ncc-1.0.4-gcc/bin
          which riscv-gaisler-elf-as

      - name: Cache QEMU build directory
        id: cache-qemu-build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-qemu-build-${{ hashFiles('**/configure', '**/Makefile') }}

      - name: Build QEMU (riscv32-softmmu only)
        run: |
          mkdir -p build
          cd build
          ../configure --target-list=riscv32-softmmu --enable-debug --disable-user --disable-tools --disable-docs
          make -j$(nproc)

      - name: Build firmware tests
        run: |
          cd firmware-tests
          make

      - name: Run QEMU test: uartTest
        run: |
          chmod +x firmware-tests/runQEMU
          echo "üß™ Running UART loopback test..."
          ./firmware-tests/runQEMU uartTest | tee uart.log

      - name: Check loopback test result
        run: |
          if ! grep -q "UART loopback test PASSED" uart.log; then
            echo "‚ùå UART loopback test failed: expected output not found"
            exit 1
          fi
